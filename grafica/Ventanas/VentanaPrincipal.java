package grafica.Ventanas;

import grafica.Clases.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;

public class VentanaPrincipal extends JFrame implements MouseListener{

    private static final long serialVersionUID = 1L;

    private final ArrayList<aristaGrafica> aristasGraficas;
    private final ArrayList<verticeGrafico> verticesGraficos;
    private Point p1,p2;
    private JPanel panel;
    private JLabel caminoCorto;

    //----------CONSTRUCTORES----------

    public VentanaPrincipal() {
        initComponents();
        panel = new JPanel();
        caminoCorto = new JLabel("Mostrar camino mas corto" , JLabel.CENTER);

        this.setTitle("Constructor de Rutas");
        this.setLocationRelativeTo(VentanaPrincipal.this);
        this.setResizable(true);

        this.getContentPane().add(panel);
        panel.add(caminoCorto);
        this.addMouseListener(this);

        this.verticesGraficos = new ArrayList<>();
        this.aristasGraficas = new ArrayList<>();
        this.p1 = null;
        this.p2 = null;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    // End of variables declaration//GEN-END:variables

    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("jLabel1");

        jMenu1.setText("File");

        jMenuItem1.setText("Cargar Mapa");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    //----------FIN DE CONSTRUCTORES----------

    //----------METODOS MODIFICADORES Y OBTENEDORES----------
    //----------FIN DE METODOS MODIFICADORES Y OBTENEDORES----------

    //----------METODOS EN GENERAL----------
 
    public void paint(Graphics g){
        verticesGraficos.forEach(nodos -> {nodos.pnitar(g);});
        aristasGraficas.forEach(enlace -> {enlace.pintar(g);});
    }
    

    public void mouseClicked(MouseEvent e) {
        if(e.getButton() == MouseEvent.BUTTON1){
            int temporal1 = e.getX();
            int temporal2 = e.getY();
            this.verticesGraficos.add(new verticeGrafico(temporal1 , temporal2));        
            repaint();
        }
        else if(e.getButton() == MouseEvent.BUTTON3){
            for(verticeGrafico nodo : verticesGraficos){
                int temporal1 = nodo.obtenerComponenteX()-verticeGrafico.D/2;
                int temporal2 = nodo.obtenerComponenteY()-verticeGrafico.D/2;
                int temporal3 = verticeGrafico.D;
                int temporal4 = verticeGrafico.D;
                if(new Rectangle(temporal1 , temporal2 , temporal3 , temporal4).contains(e.getPoint())){
                    if(p1 == null){
                        p1 = new Point(nodo.obtenerComponenteX() , nodo.obtenerComponenteY());
                    }
                    else{
                        p2 = new Point (nodo.obtenerComponenteX() , nodo.obtenerComponenteY());
                        this.aristasGraficas.add(new aristaGrafica( p1.x , p1.y , p2.x , p2.y));
                        repaint();
                        p1 = null;
                        p2 = null;
                    }  
                }
            }
        }
    }


    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }



    //----------FIN DE METODOS EN GENERAL----------
}
